// General character words for rescues and common action mode CYOA

0 value rescue
0 value safecombo

// Will drop weapons/loot to group at mission end
: .party-familiar args( chara )
	1 <- chara .party!
	TEAM_STATUS_FAMILIAR <- chara .team_status!
;


: #c #character ;
: c# character# ;

: team-full? team-count TEAM_MAX >= ;

: resetsafe 0 to safecombo ;

: .thing@ .cur_thingid@ #thing ;

: .liedown .thing@ args( self )
	ANIM_ANGLE <- self .anim.state! 
	-90 <- self .flipx * <- self .angle!
;

: .thing_liedown args( self )
	ANIM_ANGLE <- self .anim.state! 
	-90 <- self .flipx * <- self .angle!
;

: .getup .thing@ args( self )
	0 <- self .anim.state! 
	0 <- self .angle!
;

: .wakeup dup .getup 0.25 over .ai.wander_chance! 1 over .ai.attack_chance! dup .yestake drop ;
: rescueget
//	beep nearest . interactee . cr
	0.25 rescue .ai.wander_chance! 1 rescue .party-familiar 0 nearest .unseen! clear-cyoa goodfx ;
: nearestget 0.25 nearest .character@ .ai.wander_chance! 1 nearest .character@ .party-familiar 0 nearest .unseen! clear-cyoa goodfx ;
: ccharget 0.25 cchar .ai.wander_chance! 1 cchar .party-familiar 0 nearest .unseen! clear-cyoa goodfx ;

: ctakeweapons cchar .weapons-to-trunk ;

: .char-droploot dup .thing@ args( chara thing )
	LOOT_COUNT for
		i 1- <- chara .lootamt@ if i 1- <- chara .lootamt@ i 1- spawnloot
			<- thing lt-to-thing lt-droploot-vel lt-bulk-lootsprite
		then
		0 i 1- <- chara .lootamt!
	next
;

: #new-npc #character args( chara )
	<- chara character# spawn lt .charid!
	lt .as-human
	lt .id@ <- chara .cur_thingid!
	0 360 frnd lt .aim_angle!
;

: new-npc
	char-gen character# #new-npc
	0 lt .character@ .ai.flock_dist!
;

: new-npc@ new-npc lt .character@ ;

: savechar-raw-list
	0 stack CUSTOM_CHARS_MAX
	for i 1+ // skip the #1 char since that's the currently edited one
		slot>savechar# dup if shove else drop then
	next
;

: chardupcheck args( char1 char2 )
	<- char1 .seed@ <- char2 .seed@ =
	<- char1 .name@ <- char2 .name@ $=
	or
;

: savecharteamfilt #savechar-clone #character args( char1 )
	team-count for
		team-count i - #teamchar <- char1 chardupcheck
		if <- char1 char-free 0 then; // Matches existing char, so don't keep.
	next
	<- char1 char-free 1
;

: savechars-filter-vs-team ' savecharteamfilt stack-filter ;
: savechar#-list savechar-raw-list savechars-filter-vs-team drop ;


// : .dead-drunk dup .liedown 0 over .ai.wander_chance! 0 over .ai.attack_chance! drop ;
// 1 character party!
// lt .character@ .alive?

: .has-weapon? args( wid chara )
	<- wid <- chara .weapona@ = if 1 then;
	<- wid <- chara .weaponb@ = if 1 then;
	<- wid <- chara .weaponc@ = if 1 then;
	0
;

: team-has-weapon?
	team-count for dup i 1- #teamchar .has-weapon? if drop 1 then; next
	drop 0
;

: pchar-weapon? pchar .has-weapon? ;
: roadtrip-has-weapon? dup team-has-weapon? swap trunk.weapon@ or ;

: check-weapontype team-has-weapon? | ;
: check-pchar-weapontype pchar-weapon? | ;

: team-has-weapontype? 0 swap ' check-weapontype foreach drop ;
: pchar-has-weapontype? 0 swap ' check-pchar-weapontype foreach drop ;

: check-trunk-weapontype trunk.weapon@ 0= not | ;

: trunk-has-weapontype?
	0 swap ' check-trunk-weapontype foreach drop
;

: team-has-breakin? WEAPON_LIST_BREAKIN team-has-weapontype? ;

: roadtrip-has-weapontype? dup team-has-weapontype? swap trunk-has-weapontype? or ;

: roadtrip-has-firearm? WEAPON_LIST_FIREARM roadtrip-has-weapontype? ;
: roadtrip-has-umbrella? WEAPON_LIST_UMBRELLA roadtrip-has-weapontype? ;

: calmshot-check most-calmshot roadtrip-has-firearm? and ;
: longshot-check most-calmshot WEAPON_LIST_RIFLE roadtrip-has-weapontype? and ;

cyoa{

0 value bookmagtype

: bookmaggain
	bookmagtype 4 > if
		bookmagtype 5 - to bookmagtype
	then
	bookmagtype case
		0 of dup .strength++ .strengthREV endof
		1 of dup .fitness++ .fitnessREV endof
		2 of dup .medical++ .medicalREV endof
		3 of dup .mechanic++ .mechanicREV endof
		4 of dup .shooting++ .shootingREV endof
	endcase
;

: bookmagtitle
	bookmagtype case
		0 of "SWOLE" endof
		1 of "COOL RUNNINGS" endof
		2 of "MEDICINE TODAY" endof
		3 of "CARS-N-GADGETS" endof
		4 of "MODERN HUNTER" endof
		
		5 of "COMPLETE GUIDE TO LIFTING" endof
		6 of "1001 EXERCISES ANYWHERE" endof
		7 of "MORON'S GUIDE TO SURGERY" endof
		8 of "THE HANDYMAN'S BIBLE" endof
		9 of "THE SCIENCE OF SHOOTING" endof
	endcase pbold
;

: bookormag
	bookmagtype 4 > if "book" else "magazine" then
;

}

: npc@rescue lt .character@ to rescue ;

: rescue-weapon
	0 stack
		WEAPON_BASEBALL shove
		WEAPON_CANE shove
		WEAPON_HATCHET shove
		WEAPON_SLEDGE shove
		WEAPON_WRENCH shove
		WEAPON_MACHETE1 shove
		WEAPON_HOCKEY shove
		WEAPON_GOLF shove
		WEAPON_FRYING shove
		WEAPON_METAL shove
		WEAPON_CROWBAR shove
		WEAPON_CLEAVER shove
		WEAPON_CRICKET shove
		WEAPON_UMBRELLA shove
		WEAPON_KITCH shove
		WEAPON_TENNIS shove
		WEAPON_PADDLE shove
		WEAPON_POOLCUE shove
		WEAPON_FIREPOKER shove
		WEAPON_SHIV shove
		WEAPON_PURSE shove
		WEAPON_CLAWHAMMER shove
		WEAPON_BALLPEEN shove
		WEAPON_MALLET shove
		WEAPON_ICEPICK shove
		WEAPON_SCREWDRIVER shove
		WEAPON_FIRE shove
	shuffles pops nip
;

: sports-weapon
	0 stack
		WEAPON_BASEBALL shove
		WEAPON_HOCKEY shove
		WEAPON_GOLF shove
		WEAPON_CRICKET shove
		WEAPON_TENNIS shove
		WEAPON_PADDLE shove
	shuffles pops nip
;

: gun-weapon
	0 stack
		WEAPON_SHOTGUN shove
		WEAPON_RIFLE shove
		WEAPON_PISTOL shove
	shuffles pops nip
;

: crap-weapon
	0 stack
		WEAPON_CANE shove
		WEAPON_FRYING shove
		WEAPON_UMBRELLA shove
		WEAPON_KITCH shove
		WEAPON_REBAR shove
		WEAPON_WOOD shove
		WEAPON_KNITTING shove
		WEAPON_BROOM shove
		WEAPON_MOP shove
	shuffles pops nip
;

: new-veryferaldog map{ selected } . cr new-npc@ .doggify ;

: .mountiefy
	38 over .specialtype!
	6 over .strength!
	6 over .fitness!
	4 over .vitality!
	4 over .health!
	0 over .female!
	drop
;

: .alien
	51 over .specialtype!
	4 over .strength!
	4 over .fitness!
	1 over .female!
	"Grey" over .name!
	WEAPON_RAYGUN over .weapona!
	200 over .stackeda!
	skeletons_base_id 9 + over .skeleton_spriteid!
	statmod{ dup .nocarry dup .notake dup .noswap }

	// WEAPON_RAYGUN over .weapon_nodropa!
	
	drop
;

: .gerbilfy args( chara )
	<- chara .nocarry
	<- chara .noweapon
	<- chara .notake
	"GNORT!" <- chara .perk!
	76 <- chara .specialtype!
	WEAPON_CLAW <- chara .weapon_default!
	6 <- chara .fitness!
	0 <- chara .strength!
	2 <- chara .vitality!
	2 <- chara .health!
	1 <- chara .carrying.slot_count!
	"Tiny Eater" <- chara .trait!
	0.2 <- chara .speed_bonus!
	50 %chance if "R*O*U*S" else "Gnort" then <- chara .name!
	skeletons_base_id 11 + <- chara .skeleton_spriteid!
	"is a freakishly large, gnomeless rodent. I think it's some kind of... gerbil." <- chara .job!
	3 <- chara .skincolour!
;

: .beaverify ( chara )
	dup .gerbilfy
	77 over .specialtype!
	3 over .skincolour!
	"Canada Day" over .perk!
	"Beaver" over .name!
	"is some kind of Canadian gerbil? I don't know, this is hard to keep track of." over .job!
	drop
;

: .beaver? .specialtype@ 77 = ;

: .moosify ( chara ) statmod{ 
	3 over .pet!

	skeletons_base_id 10 + over .skeleton_spriteid!

	"MOOSE" over .name!

	0.25 over .bounceval!
	18 over .footoff.y!
	4 over .footoff.x!
	10 over .health!
	WEAPON_ANTLERS over .weapon_default!
	50 over .fitness!
	-0.75 over .breathescale!
	dup .nocarry 
	dup .notake 
	dup .noswap 
//	MOD_MOO over .setmod 
	drop
} ;

: .skelbody
	78 over .specialbody!
	WEAPON_CLAW over .weapon_default!
	1 over .vitality!
	1 over .health!
	"is now a HALF-HUMAN, HALF-SKELETON!" over .job!
drop ;

: .skelify 
	78 over .specialtype!
	WEAPON_CLAW over .weapon_default!
	0 over .fitness!
	0 over .strength!
	0 over .mechanical!
	0 over .medical!
	0 over .shooting!
	0 over .wits!
	0 over .attitude!
	1 over .morale!
	1 over .vitality!
	1 over .health!
	"is now a spooky dancing skeleton, no doubt after some blunder." over .job!
 drop ;

: .mallcop1
	69 over .specialtype!
	4 over .strength!
	0 over .female!
	"Mall Cop" over .name!
	WEAPON_NIGHTSTICK over .weapona!
	WEAPON_NIGHTSTICK over .weapon_nodropa!
	drop
;

: .mallcop2
	70 over .specialtype!
	4 over .shooting!
	0 over .female!
	"Mall Cop" over .name!
	WEAPON_PISTOL over .weapona!
	WEAPON_PISTOL over .weapon_nodropa!
	30 over LOOT_BULLET swap .lootamt!
	statmod{ dup .nocarry dup .notake dup .noswap }
	drop
;

: .jokelogan
	-123 over .specialtype!
	4 over .strength!
	5 over .fitness!
	2 over .shooting!
	0 over .composure!
	0 over .female!
	5 over .vitality!
	5 over .health!
	"Joke Logan" over .name!
	WEAPON_SLEDGE over .weapona!
	drop
;

: .dickcompton
	-115 over .specialtype!
	4 over .strength!
	1 over .fitness!
	4 over .shooting!
	0 over .composure!
	0 over .female!
	6 over .vitality!
	6 over .health!
	1 over .headoff.y!
	"Dick Compton" over .name!
	WEAPON_NIGHTSTICK over .weapona!
	drop
;

: .loganer
	0 over .strength!
	0 over .fitness!
	0 over .shooting!
	0 over .composure!
	6 over .loyalty!
	0.92 over .scale.body.y! 0.92 over .scale.body.x! 0.92 over .scale.head.y! 0.92 over .scale.head.x!
	1 11 rnd case
	1 of WEAPON_HOCKEY over .weapona! endof
	2 of 
		80 %chance if
			WEAPON_BASEBALL over .weapona! 
		else
			50 %chance if
				50 %chance if
					WEAPON_CRICKET over .weapona! 
				else
					WEAPON_HOCKEY over .weapona! 
				then
			else
				WEAPON_ALUMINUM over .weapona! 
			then
		then
	endof
	3 of 
		60 %chance if
			WEAPON_KITCH over .weapona! 
		else
			WEAPON_CLEAVER over .weapona! 
		then
	endof
	4 of 
		60 %chance if
			WEAPON_RIFLE over .weapona! 
		else
			70 %chance if
				WEAPON_HUNTING over .weapona! 
			else
				WEAPON_OBREZ over .weapona! 
			then
		then
		23 over LOOT_RIFLE_SHELL swap .lootamt!
		statmod{ dup .nocarry dup .notake dup .noswap }
	endof
	5 of WEAPON_MCSWORD over .weapona! endof
	6 of 
		60 %chance if
			WEAPON_PISTOL over .weapona! 
		else
			60 %chance if
				WEAPON_SNUBNOSE over .weapona! 
			else
				WEAPON_MILIPISTOL over .weapona! 
			then
		then
		30 over LOOT_BULLET swap .lootamt!
		statmod{ dup .nocarry dup .notake dup .noswap }
	endof
	7 of 
		60 %chance if
			WEAPON_LEVSHOTTY over .weapona! 
		else
			70 %chance if
				WEAPON_SHOTGUN over .weapona! 
			else
				WEAPON_DBSHOTTY over .weapona! 
			then
		then
		15 over LOOT_SHOTGUN_SHELL swap .lootamt!
		statmod{ dup .nocarry dup .notake dup .noswap }
	endof
	8 of 
		80 %chance if
			WEAPON_MACHETE1 over .weapona! 
		else
			WEAPON_MACHETE2 over .weapona! 
		then
	endof
	9 of 
		60 %chance if
			WEAPON_KITCH over .weapona! 
		else
			WEAPON_CLEAVER over .weapona! 
		then
	endof
	10 of 
		50 %chance if
			WEAPON_CLAWHAMMER over .weapona! 
		else
			WEAPON_BALLPEEN over .weapona! 
		then
	endof
	11 of 
		50 %chance if
			WEAPON_FRYING over .weapona! 
		else
			WEAPON_WRENCH over .weapona! 
		then
	endof
	12 of 
		50 %chance if
			WEAPON_MOLOTOV over .weapona! 2 over .stackeda!
		else
			WEAPON_GRENADE over .weapona! 2 over .stackeda!
		then
	endof
	endcase
	"Joke Loganer" over .name!
	
	drop
;


// Turn char to hulk colour
: .hulkclr args( chara )
	0 <- chara .skincolour! // LILY WHITE BASE SKIN
	12 <- chara .haircolour! // LILY WHITE BASE HAIR

	0.0 <- chara .tint.skin.r!
	0.8 <- chara .tint.skin.g!
	0.25 <- chara .tint.skin.b!

	0.5 <- chara .tint.hair.r!
	0.0 <- chara .tint.hair.g!
	1.0 <- chara .tint.hair.b!
;

// General char RGB words
: .tint.hair! args( r g b chara )
	<- r <- chara .tint.hair.r!
	<- g <- chara .tint.hair.g!
	<- b <- chara .tint.hair.b!
;

: .tint.hair@ args( chara )
	<- chara .tint.hair.r@
	<- chara .tint.hair.g@
	<- chara .tint.hair.b@
;

: .tint.skin! args( r g b chara )
	<- r <- chara .tint.skin.r!
	<- g <- chara .tint.skin.g!
	<- b <- chara .tint.skin.b!
;

: .tint.skin@ args( chara )
	<- chara .tint.skin.r@
	<- chara .tint.skin.g@
	<- chara .tint.skin.b@
;

: .tint.body! args( r g b chara )
	<- r <- chara .tint.body.r!
	<- g <- chara .tint.body.g!
	<- b <- chara .tint.body.b!
;

: .tint.skin@ args( chara )
	<- chara .tint.body.r@
	<- chara .tint.body.g@
	<- chara .tint.body.b@
;

: .stoneclr args( chara )
	0 <- chara .skincolour!
	12 <- chara .haircolour!

	0.5 0.5 0.5 <- chara .tint.skin!
	0.5 0.5 0.5 <- chara .tint.hair!
	0.5 0.5 0.5 <- chara .tint.body!
;

// Become a dogtaur
: .dogtaur args( chara )
	WEAPON_CLAW <- chara .weapon_default!
	73 <- chara .specialbody!
	0 <- chara .specialtype!
	skeletons_base_id 2 + <- chara .skeleton_spriteid!

	// Copy char's hair colour to body tint so that dogtaur body hair matches
	<- chara .hair-rgb <- chara .tint.body!
;

// THE FLY
: .flyhead args( chara )
	74 <- chara .specialhead!
	1 <- chara .voice.ex!
	0.15 <- chara .voice.pitch!
	1 <- chara .voice.k!
	0.015 <- chara .voice.duty!
	1 <- chara .voice.vol!
	10000 <- chara .voice.flo!
	1000 <- chara .voice.fhi! // Doesn't seem to do anything
	0.98 <- chara .voice.q!
;

: .flybody args( chara )
	WEAPON_CLAW <- chara .weapon_default!
	1 1 1 <- chara .tint.body!
	74 <- chara .specialbody!
;

: .fly args( chara )
	WEAPON_CLAW <- chara .weapon_default!
	1 1 1 <- chara .tint.body!
	<- chara .specialhead@
		<- chara .flyhead
		74 <- chara .specialtype!
	<- chara .specialhead!
;

: .punkinhead 80 swap .specialhead! ;

: .witchify args( chara ) 81 <- chara .specialtype!
	2 <- chara .headoff.y!
	"Witch" <- chara .name!
	"remains angry that she couldn't bring her cauldron." <- chara .job!
	WEAPON_CLAW <- chara .weapon_default!
	WEAPON_WITCH <- chara .weapona!
	WEAPON_WITCH <- chara .weapon_nodropa!
	WEAPON_UZI <- chara .weaponb!
	WEAPON_UZI <- chara .weapon_nodropb!
	50 LOOT_BULLET <- chara .lootamt!
	1 <- chara .female!
	0 <- chara .loyalty!
	5 <- chara .medical!
	0 <- chara .attitude!
	0 <- chara .composure!
	0 <- chara .specialhead!
	0 <- chara .specialbody!
	// TODO: Wand?
;

: .wizardify args( chara ) 61 <- chara .specialtype!
	0 <- chara .female!
	"The Wiz" <- chara .name!
	"is a wizard." <- chara .job!
	WEAPON_WIZSTICK <- chara .weapona!
	WEAPON_WIZSTICK <- chara .weapon_nodropa!
	6 <- chara .wits!
	1 <- chara .strength!
	2 <- chara .fitness!
;

// COUNT DINKULA
// =============

: .nofloat
	0 over .floatval!
	0 over .floatheight!
	drop
;


defer dracbat
defer batdrac

: drac-thing-events args( me teid )

	<- me .character@ .dead? if then;

	<- teid THING_EVENT_TIMER = if
		<- me .character@ .specialtype@ 83 <> if then;
		<- me .character@ batdrac
		0 <- me .nocollide!
		RED "BLAH!" .. <- me .yellmsglong
	then;

	<- teid THING_EVENT_WAS_HIT = if
		<- me .character@ .specialtype@ 82 <> if then;
		<- me .character@ dracbat
		60 <- me .invincible_counter!
		1 <- me .nocollide!
		RED "NOW I AM IN A BAT MOOD!" .. <- me .yellmsglong
		60 7 * <- me .timer! // 7 seconds, formerly 13

		// TODO: Drop weapons & set slot count to 1?
	then;
;

: drac-main-events ( teid ) args( chara eventid )

	<- eventid MAIN_EVENT_MISSION_START = if <- chara batdrac then; // In case we're a bat
	<- eventid MAIN_EVENT_DRIVING_START = if <- chara batdrac then; // In case we're a bat

	<- eventid MAIN_EVENT_MISSION_CHARACTER_THING_EVENT <> if then;

	<- chara .thing@ swap ( teid ) drac-thing-events
;

: .dracufy args( chara )
	"Count Dinkula" <- chara .name!
	"skulks around going BLAH for some reason." <- chara .job!
	82 <- chara .specialtype!
	WEAPON_CLAW <- chara .weapon_default!
	<- chara .nofloat

	6 <- chara .fitness!
	0 <- chara .speed_bonus!
	' drac-main-events <- chara .main_events!
	skeletons_base_id 3 + <- chara .skeleton_spriteid!

	<- chara .thing@ if
		<- chara .thing@ .poofmescary
		15 <- chara .thing@ .fade!
	then
;

last to batdrac

: .batify
	83 over .specialtype!
	12 over .floatval!
	10 over .floatheight!
	10 over .floattoggle!
	skeletons_base_id 4 + over .skeleton_spriteid!

	drop
;

: .dracubatify
	dup .dracufy
	dup .batify
	1 over .speed_bonus!
	drop
;

last to dracbat

: .grimreaperify args( chara )
	"Grim Reaper" <- chara .name!
	84 <- chara .specialtype!
	2 <- chara .floatval!
	8 <- chara .floatheight!
	180 <- chara .floattoggle!
	WEAPON_REAPER <- chara .weapona!
	10 <- chara .vitality!
	10 <- chara .health!
	10 <- chara .fitness!
	100 STAT_FITNESS <- chara .bonus!
	10 <- chara .strength!
	100 STAT_STRENGTH <- chara .bonus!
	<- chara .nocarry 
	<- chara .notake 
	<- chara .noswap 
	<- chara .nopickups
	0 <- chara .ai.loot_chance!
;


: dogman-death-handler dup .thing@ args( chara thing )
	// Don't die!
	3 <- chara .health!
	1 <- thing .hitpoints!

	0 pchar .specialtype!
	0 pchar .specialhead!
	0 pchar .specialbody!

	<- chara .doggify
	3 <- chara .bodytype! // PUG

	// Spit out 2 dogs
	2 for
		new-npc lt .character@ .doggify		// Spawn a new npc and turn it into a dog
		<- thing lt-to-thing				// Place it where we are
		<- thing lt .follow					// And follow us
		-2 lt .vel.z!

		team-count 4 < if
			lt .character@ .recruit
		then
		
		// - check if there is room in the group, and if so, lt .character@ .recruit the new dog
		// - otherwise, special post-mission event?
	next

	<- thing .pos.z@ 8 - <- thing .pos.z!
	-2 <- thing .vel.z!
	36000 <- thing .angle! 

	"Aw, WOOF it" <- thing statmod{ .yellmsglong }

	// Don't do this again on death
	0 <- chara .main_events!
;

: dogman-main-events args( chara eventid )

	<- eventid MAIN_EVENT_MISSION_CHARACTER_THING_EVENT <> if then;

	// Thing events
	( teid )

	THING_EVENT_DIED ?( <- chara dogman-death-handler );

	
;

: .dogmanify
	0 over .pet!
	22 over .specialtype!
	"Woof" over .name!
	3 over .composure!
	2 over .health!
	2 over .vitality!
	" is uh... I'm not sure." over .job!
	' dogman-main-events over .main_events! drop
;



// Cat Lady

: catladycat args( body )
	new-npc lt .character@ .catify
	<- body lt .character@ .bodytype!
	lt .character@ .default-ai-setup
;

: catladysummon args( lady )
	1 8 rnd catladycat
	1 lt .character@ .party-familiar
	<- lady lt-to-thing drift // Put the cat near the cat lady
;

: catladysummonpoof catladysummon lt mission{ .smokepoof } ;

: catlady-thing-events args( me teid )

	<- me .character@ .dead? if then;

	<- teid THING_EVENT_WAS_HIT = if
		<- me .character@ .specialtype@ 11 <> if then;
		RED "SAVE ME, KITTIES!" .. <- me .yellmsglong
		<- me catladysummonpoof
	then;
;

: catlady-main-events ( teid ) args( chara eventid )

	<- chara .party@ 0= if then;

	<- eventid MAIN_EVENT_MISSION_START = if <- chara .thing@ catladysummon then;
	<- eventid MAIN_EVENT_DRIVING_START = if then;

	<- eventid MAIN_EVENT_MISSION_CHARACTER_THING_EVENT <> if then;

	<- chara .thing@ swap ( teid ) catlady-thing-events
;

: .catladyify dup .thing@ args( chara lady )
	11 <- chara .specialtype!
	1 <- chara .female!
	0 <- chara .wits!
	6 <- chara .attitude!
	"Cat Lady" <- chara .name!
	"loves cats! She loves cats far more than any other thing, person, or concept." <- chara .job!
	WEAPON_CLAW <- chara .weapon_default!
	
	' catlady-main-events <- chara .main_events!

	7 for
		i catladycat 				// Spawn cat number for 7 down to 1
		<- lady lt .follow 			// lt (cat) follows the lady
		<- lady lt-to-thing drift	// Position around lady and drift them away a bit
	next 

;

: .mariaify args( chara )
	"Maria" <- chara .name!
	19 <- chara .specialtype!
	1 <- chara .female!
	WEAPON_MEGAFRY <- chara .weapona!
	WEAPON_MEGAFRY <- chara .weapon_nodropa!
	"is a farmer from Colombia. She is bulging with muscle. She has a tiny hat." <- chara .job!
	// WEAPON_SCYTHE <- chara .weaponb!
	// WEAPON_SCYTHE <- chara .weapon_nodropb!
	4 <- chara .fitness!
	2 STAT_STRENGTH <- chara .bonus!
	6 <- chara .strength!
;

// Cold Steel CEO

0 stack
	"All these zombies are good for business! " trollface .. shove
	RAINBOW 0x dd $chr .. "*soundtrack: guitars thrashing/wailing*"  .. 0x de $chr .. shove
	RAINBOW 0x dd $chr .. " COLD STEEEEEEL! "  .. 0x de $chr .. shove
	"You put one of these by your front door, and you're going to be a power to reckon with." 3 $chr .. shove
	"How could anyone use the inferior weapons of my competitors? " DX .. shove
	"This greatsword cuts through 4 zombies at once!" shove
	"COLD STEEL KNIVES!" shove
	"You won't believe how light this is!" shove
	"You could do pull-ups with this thing, no problem!" shove
	"Easily chops skateboards *and* surfboards in half!" shove
	"The sword world continues to overlook the majesty of this greatsword!" shove
	"For what you get, six pounds of sword, it's very reasonably priced!" shove
	"Built by Cold Steel, it'll hold its own cutting with any sword in the world!" shove
	"Flick, flick, flick! And up comes apart a group of zombies!" shove
	"The greatsword is underappreciated, in my opinion." shove
	"A big sword like this, can make it look easy to make that difficult cut." shove
	"Zombies are no match for the greatsword, though!" shove
	"That was absolutely effortless!" shove
	"If you're strong enough to wield a greatsword, it's an enormous advantage." shove
	"This thing is a room wrecker, a yard wrecker, a street wrecker..." shove
	"It's just unbelievable, the cutting power and this beautiful sword." shove
	"Having this sword in the zombocalypse? I've clearly enjoyed that." shove
	"This is why you buy a greatsword, because you can make those huge cuts." shove
	"Man, this thing just sails through zombies." shove
	"No one is going to be able to take advantage of you when you have a greatsword in your house!" shove
	"What more do you want from a sword?" shove
	"How do you beat this? Tremendous reach, cuts an ENORMOUS FLIPPIN' HOLE!" shove
	"What more can I do to convince you to buy a greatsword?" shove
	"Buy a Cold Steel greatsword. Don't be ripped off by my competitors!" shove
	"Don't be ripped off by my competitors selling you absolute junk!" shove
	"You'll praise my name, you're going to love this sword." shove
value random-coldsteel-base
random-coldsteel-base shuffles var random-coldsteel

: random-coldsteel-saying
	random-coldsteel depths 0= if random-coldsteel-base shuffles to random-coldsteel then
	pops nip
;

: lynn-thing-events args( me teid )

	<- me .character@ .dead? if then;
	
	<- teid THING_EVENT_TIMER = <- me .character@ .seed@ 555 = and if
		60 6 10 rnd * <- me .timer!
		RED random-coldsteel-saying .. <- me .yellmsglong
	then;

;

: lynn-main-events ( teid ) args( chara eventid )

	<- chara .party@ 0= if then;

	<- eventid MAIN_EVENT_MISSION_START = if 
		60 5 8 rnd * <- chara .thing@ .timer! 
		555 <- chara .seed!
	then;

	<- eventid MAIN_EVENT_MISSION_CHARACTER_THING_EVENT <> if then;

	<- chara .thing@ swap ( teid ) lynn-thing-events
		
;

: .lynnify args( chara )
	"Lynn" <- chara .name!
	79 <- chara .specialtype!
	0 <- chara .female!
	0 <- chara .seed!
	WEAPON_DEMOZWEI <- chara .weapona!
	WEAPON_DEMOZWEI <- chara .weapon_nodropa!
	"C. Thompson is the CEO of Cold Steel Knives. He's giving you a live product demo!" <- chara .job!
	1 <- chara .carrying.slot_count!
	4 <- chara .fitness!
	4 STAT_STRENGTH <- chara .bonus!
	5 <- chara .strength!
	
	' lynn-main-events <- chara .main_events!
;


: goat-main-events args( chara eventid )

	<- eventid MAIN_EVENT_MISSION_CHARACTER_THING_EVENT <> if then;

	THING_EVENT_SWING ?(
		sfx{ goat <- chara .thing@ .adjust-vol pitch@ 1.25 * pitch! 250 d!
			freq@ 1.5 * freq!
		}

		0.375 ($ PURPLE .. FLICKER .. "baa." $) <- chara .thing@ .reportdur
	);

	drop
;

// generic petmaking, can't use weapons or carry things, skill penalties but not fitness
: .petify args( chara )
	2 <- chara .pet!
	WEAPON_CLAW <- chara .weapon_default!
	statmod{ MOD_PETMALUS <- chara .setmod }
	USE_FLAG_SWAP USE_FLAG_CARRY | <- chara .usefilterset 
	<- chara statmod{ .noweapon }
	1 <- chara .carrying.slot_count!	
; 

: .goatify args( chara )
	<- chara .petify
		
	13 <- chara .bodytype!
	WEAPON_BUTT <- chara .weapon_default!
	0.2 <- chara .bounceval!
	-0.75 <- chara .breathescale!
	
	0 <- chara .loyalty!
	0 <- chara .attitude!
	
	"is a goat. You don't own it, it's just following you by its own free will." <- chara .job!
	
	skeletons_base_id 10 + <- chara .skeleton_spriteid!

	' goat-main-events <- chara .main_events!
;

: sports-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_MISSION_START = if
		WEAPON_SPORTSHORN <- chara .weapona@ = if 60 <- chara .stackeda! then
	then;
;

: .sportify args( chara )
	"Sports" <- chara .name!
	1 3 rnd <- chara .hattype!
	WEAPON_SPORTSHORN <- chara .weapona!
	WEAPON_SPORTSHORN <- chara .weapon_nodropa!
	60 <- chara .stackeda!
	"SPORTS" <- chara .trait!
	"SPORTS" <- chara .perk!
	WEAPON_FOAMHAND <- chara .weaponb!
	WEAPON_FOAMHAND <- chara .weapon_nodropb!
	"is the ultimate sports fan." <- chara .job!
	2 <- chara .carrying.slot_count!
		
	' sports-main-events <- chara .main_events!
;

: .skelknightify args( chara )
	"Sir Boney" <- chara .name!
	96 <- chara .specialtype!
	0 <- chara .female!
	6 <- chara .fitness!
	5 <- chara .strength!
	5 <- chara .vitality!
	5 <- chara .health!
	0 <- chara .loyalty!
	"BONE" <- chara .trait!
	"ZONE" <- chara .perk!
	<- chara .nodeathdrop
	"wears a thick suit of plate armor. He lost the helmet, making him vulnerable." <- chara .job!
	WEAPON_SKULLMACE <- chara .weapona!
	WEAPON_SKULLMACE <- chara .weapon_nodropa!
	// WEAPON_GLADIUS <- chara .weaponb!
;

: .bortify args( chara )
	"Bort" <- chara .name!
	0 <- chara .female!
	0 <- chara .loyalty!
	0 <- chara .strength!
	0 <- chara .fitness!
	"BORT" <- chara .trait!
	"SAMSON" <- chara .perk!
	92 <- chara .specialtype!
	WEAPON_BORTBOARD <- chara .weapona!
	WEAPON_BORTBOARD <- chara .weapon_nodropa!
	"was summoned in a dark ritual of antique can sacrifice." <- chara .job!
;

: .nimbusify args( chara )
	"Nimbus Ordeal" <- chara .name!
	0 <- chara .female!
	6 <- chara .loyalty!
	0 <- chara .strength!
	0 <- chara .fitness!
	93 <- chara .specialtype!
	WEAPON_GUSTER <- chara .weapona!
	WEAPON_GUSTER <- chara .weapon_nodropa!
	"is fleeing from a ..... mysterious past............" <- chara .job!
	1 <- chara .carrying.slot_count!
;

: .kaijuify args( chara )
	"Kaiju" <- chara .name!
	1 <- chara .female!
	4 <- chara .strength!
	4 <- chara .fitness!
	91 <- chara .specialtype!
	"is someone in a giant monster costume. You can see the zipper." <- chara .job!
	1 <- chara .carrying.slot_count!
	WEAPON_CLAW <- chara .weapon_default!
	4 <- chara .vitality!
	4 <- chara .health!
;

: .boganify args( chara )
	"Bogan" <- chara .name!
	0 <- chara .female!
	3 <- chara .strength!
	3 <- chara .fitness!
	1 STAT_FITNESS <- chara .bonus!
	1 STAT_STRENGTH <- chara .bonus!
	"Dadamantium Claws" <- chara .perk!
	"Gnome Regen" <- chara .trait!
	97 <- chara .specialtype!
	2 <- chara .carrying.slot_count!
	2 <- chara .vitality!
	2 <- chara .health!
	"is some sort of hairy gnome? Has gnomish healing factor." <- chara .job!
	WEAPON_FIERCE <- chara .weapon_default!
;

: .hnkify args( chara )
	0 4 rnd case
		0 of "HANK" endof
		1 of "HONK" endof
		2 of "HINK" endof
		3 of "HENK" endof
		4 of "HYNK" endof
	endcase <- chara .name!
	0 <- chara .female!
	0 <- chara .loyalty!
	6 <- chara .shooting!
	5 <- chara .fitness!
	4 <- chara .strength!
	80 LOOT_BULLET <- chara .lootamt!
	95 <- chara .specialtype!
	WEAPON_MODRED9 <- chara .weapona!
	WEAPON_MODRED9 <- chara .weapon_nodropa!
	"is a special agent, on a special mission, with a special gun. He won't betray you." <- chara .job!
;

// Samedi

: samediskel
	new-npc lt .character@ .skelify
	lt .character@ .default-ai-setup
;

: samedisummon args( lady )
	samediskel
	1 lt .character@ .party-familiar
	<- lady lt-to-thing drift
;

: samedisummonpoof samedisummon lt mission{ .smokepoof } ;

: samedi-thing-events args( me teid )

	<- me .character@ .dead? if then;

	<- teid THING_EVENT_WAS_HIT = if
		<- me .character@ .specialhead@ 87 <> if then;
		RED "ARISE, SKELETON ARMY!" .. <- me .yellmsglong
		<- me samedisummonpoof <- me samedisummonpoof
	then;
;

: samedi-main-events ( teid ) args( chara eventid )

	<- chara .party@ 0= if then;

	<- eventid MAIN_EVENT_MISSION_START = if <- chara .thing@ samedisummon then;
	<- eventid MAIN_EVENT_DRIVING_START = if then;

	<- eventid MAIN_EVENT_MISSION_CHARACTER_THING_EVENT <> if then;

	<- chara .thing@ swap ( teid ) samedi-thing-events
;

: .samedify dup .thing@ args( chara lady )
	87 <- chara .specialhead!
	1 <- chara .female!
	6 <- chara .wits!
	-1 <- chara .headoff.y!
	0 <- chara .attitude!
	"Samedi" <- chara .name!
	"is constantly followed around by skeletons." <- chara .job!
	"Skeleton Queen" <- chara .perk!
	"Phoenix" <- chara .trait!
	
	' samedi-main-events <- chara .main_events!

	4 for
		samediskel
		<- lady lt .follow 			
		<- lady lt-to-thing drift
	next 
	
;

: .unclesamify args( chara )
	105 <- chara .specialtype!
	0 <- chara .female!
	0 <- chara .wits!
	0 <- chara .attitude!
	1 <- chara .vitality!
	1 <- chara .health!
	"Uncle Sam" <- chara .name!
	"RULEZ" <- chara .perk!
	"AMERICA" <- chara .trait!
	"is a living symbol of AMERICA, which no longer exists if you want to get technical." <- chara .job!
;

: .july4ify args( chara )
	104 <- chara .specialtype!
	6 <- chara .strength!
	3 <- chara .vitality!
	3 <- chara .health!
	"Muscle Eagle" <- chara .name!
	"EAGLE" <- chara .perk!
	"BALD" <- chara .trait! 
	"is a living symbol of AMERICA, currently escaping to Canada." <- chara .job!
;

: .pigify args( chara )
	<- chara .petify
	12 <- chara .bodytype!
	1.5 <- chara .bounceval!
	-0.95 <- chara .breathescale!
	<- chara .notake
	WEAPON_PIGBUTT <- chara .weapon_default!
	"is some pig." <- chara .job!
	-2 STAT_DEXTERITY <- chara .bonus+
	skeletons_base_id 8 + <- chara .skeleton_spriteid!
	3 4 rnd <- chara .strength!
	3 4 rnd <- chara .fitness!
;

: .chickenify args( chara )
	<- chara .petify
	14 <- chara .bodytype!
	-0.1 <- chara .bounceval!
	<- chara .notake
	skeletons_base_id 4 + <- chara .skeleton_spriteid!
	1 <- chara .vitality!
	1 <- chara .health!
	0 <- chara .strength!
	0 <- chara .fitness!
;

: .botshared args( st health chara )
	6 <- chara .strength! 6 <- chara .fitness! <- chara .notake 
	<- st <- chara .specialtype! <- health <- chara .vitality! <- health <- chara .health!
;
: .redbotify args( chara )
	WEAPON_KUNG <- chara .weapon_default! 
	39 6 <- chara .botshared
;

: .bluebotify args( chara )
	WEAPON_BOXING <- chara .weapon_default! 
	40 4 <- chara .botshared
;

: .cavemanify args( chara )
	102 <- chara .specialtype!
	"Caveman" <- chara .name!
	1 <- chara .female!
	"is a fighter from pre-civilization, recently thawed from ice." <- chara .job!
	1 <- chara .strength!
	2 <- chara .fitness!
	3 STAT_STRENGTH <- chara .bonus!
	2 STAT_FITNESS <- chara .bonus!
	WEAPON_GIANTCLUB <- chara .weapona!
	WEAPON_GIANTCLUB <- chara .weapon_nodropa!
	4 <- chara .vitality!
	4 <- chara .health!
	<- chara .nocanshoot
	2 <- chara .carrying.slot_count!
;

: .gigaguyify args( chara )
	98 <- chara .specialtype!
	"GigaGuy" <- chara .name!
	0 <- chara .female!
	"is a super fighting robot, or some weird guy in tights." <- chara .job!
	WEAPON_GIGAMAN <- chara .weapona!
	WEAPON_GIGAMAN <- chara .weapon_nodropa!
	1 <- chara .stackeda!
	1 <- chara .carrying.slot_count!
;

: .beemanify args( chara )
	20 <- chara .specialtype!
	"Bee Mann" <- chara .name!
	0 <- chara .female!
	"wanders the world, helping others, seeking redemption." <- chara .job!
	WEAPON_TOY <- chara .weapona!
	WEAPON_TOY <- chara .weapon_nodropa!
	6 <- chara .loyalty!
	2 <- chara .carrying.slot_count!
	2 <- chara .vitality!
	2 <- chara .health!
;

: .renfairify args( chara )
	88 <- chara .specialtype!
	"Bard" <- chara .name!
	1 <- chara .female!
	"is a traveling singer you hired at a Ren Faire." <- chara .job!
	WEAPON_LUTE <- chara .weapona!
	WEAPON_LUTE <- chara .weapon_nodropa!
	<- chara .bardify
	6 <- chara .wits!
	6 <- chara .attitude!
	3 4 rnd <- chara .fitness!
;

: .firemanify args( chara )
	90 <- chara .specialtype!
	"wears a fireproof suit at all times, including the helmet at meals." <- chara .job!
	0 <- chara .thing@ .flammability!
	"Fireproof" <- chara .trait!
	"Pyromaniac" <- chara .perk!
	WEAPON_FIRE <- chara .weapona!
	WEAPON_MOLOTOV <- chara .weaponc!
	WEAPON_BLOWTORCH <- chara .weaponb!
	200 <- chara .stackedb!	
;

: turtleify args( chara )
	99 <- chara .specialtype!
	"Tortuga" <- chara .name!
	0 <- chara .female!
	"is a mutated reptile of some sort." <- chara .job!
	WEAPON_SAI <- chara .weapona!
	WEAPON_SAI <- chara .weapon_nodropa!
	WEAPON_SAI <- chara .weaponb!
	0 <- chara .attitude!
	0 <- chara .wits!
	4 <- chara .strength!
	4 <- chara .fitness!
	1 STAT_FITNESS <- chara .bonus!
;

: .moodguyify args( chara )
	101 <- chara .specialtype!
	"Moody" <- chara .name!
	0 <- chara .female!
	"is a supersoldier." <- chara .job!
;

: .woodwomanify args( chara )
	106 <- chara .specialtype! 
	"Wood Woman" <- chara .name!
	WEAPON_LOGLADYLOG <- chara .weapona!
	WEAPON_LOGLADYLOG <- chara .weapon_nodropa!
	1 <- chara .female!
	"is hauling around a gigantic chunk of wood." <- chara .job!
;

: pirate-main-events ( teid ) args( chara eventid )
	<- chara .party@ 0= if then;
	<- eventid MAIN_EVENT_DRIVING_START = if beep
		WEAPON_CAPTAINCANNON <- chara .weaponb@ = if 20 <- chara .stackedb! then
	then;
;


: .piratify args( chara )
 	108 <- chara .specialtype! 
	WEAPON_CUTLASS <- chara .weapona!
	WEAPON_CUTLASS <- chara .weapon_nodropa!
	WEAPON_CAPTAINCANNON <- chara .weaponb!
	WEAPON_CAPTAINCANNON <- chara .weapon_nodropb!
	20 <- chara .stackedb!
	"Captain" <- chara .name!
	1 <- chara .female!
	4 <- chara .strength!
	4 <- chara .fitness!
	0 <- chara .loyalty!
	0 <- chara .composure!
	-1 STAT_DEXTERITY <- chara .bonus+ // Formerly -2 but was too annoying
	"can't run that fast on account her prized antique peg leg." <- chara .job!
	' pirate-main-events <- chara .main_events!
;

: .puppykittify args( chara )

	"GROWING PET" <- chara .trait!
	6 <- chara .loyalty!
	1 STAT_MORALE <- chara .bonus+
	-0.3 <- chara .speed_bonus!

	80 %chance if
		"Puppy" <- chara .name!
		<- chara .doggify
		"LOYAL BOND" <- chara .perk!
		WEAPON_WEAKCLAW <- chara .weapon_default!
		18 19 rnd <- chara .bodytype!
	else
		"Kitty" <- chara .name!
		<- chara .catify
		"LESS DISLOYAL" <- chara .perk!
		WEAPON_CLAW <- chara .weapon_default!
		10 11 rnd <- chara .bodytype!
	then
;

// .romeroify 111 .specialtype!
// .farmshotify 103, waiting on double barrel
// .cupidify 107, likely a bow or special bow
// .barbarify 100, probably bow and dagger or wooden club

// Temp Char Stuff

: tempchar-thing-events args( me teid )
	<- teid THING_EVENT_TIMER = if
		<- me mission{ .smokepoof }
		<- me silentkillit
	then;

	<- teid THING_EVENT_DIED = if 1 <- me .unseen! then;

;

: tempchar-main-events ( teid ) args( chara eventid )
	<- eventid MAIN_EVENT_DRIVING_START = if 0 <- chara .party! then;
	<- eventid MAIN_EVENT_MISSION_CHARACTER_THING_EVENT <> if then;
	<- chara .thing@ swap ( teid ) tempchar-thing-events
;

// Turrets (don't use tempchar-common shared logic)
: .turretshared dup .thing@ args( st health chara me )
	6 <- chara .shooting! <- chara .notake 
	<- st <- chara .specialtype! <- health <- chara .vitality! <- health <- chara .health!
	1 <- chara .carrying.slot_count!
	60 300 330 rnd * <- me .timer!

	' tempchar-main-events <- chara .main_events!

	-1 <- chara .breathescale!
	1 <- me .anim.weapontop!
	90 rndsign * <- me .move_angle!

	1 <- me .ai.threat_mode!
	0 <- chara .ai.attack_level!
//	8 <- me .weapon_state.off.y!

	0 <- me .flammability!
	1 <- me .subtypeid! // For non-human damage effects

//	15 <- chara .ai.react_min!
//	15 <- chara .ai.react_max!

	0 <- chara .ai.react_min!
	0 <- chara .ai.react_max!

//	15 <- chara .ai.assess_min!
//	15 <- chara .ai.assess_max!

	0 <- chara .ai.assess_min!
	0 <- chara .ai.assess_max!

	160 <- chara .ai.shoot_dist!

	0 <- chara .ai.wander_chance!
	0 <- chara .ai.threat_threshold!
	1 <- chara .ai.threat_respond_chance!
	0 <- chara .ai.threat_relax_chance!
	0 <- chara .ai.flee_dist!
	0 <- chara .ai.flock_dist!

	weapondef{ ' TURRET-OP } <- me .user_word!

	-1 <- chara .bounceval!
;


: .redturretify args( chara )
	-113 3 <- chara .turretshared
	WEAPON_REDTURRETGUN <- chara .weapona!
	WEAPON_REDTURRETGUN <- chara .weapon_nodropa!
	150 LOOT_RIFLE_SHELL <- chara .lootamt!

;

: .greenturretify args( chara )
	-114 2 <- chara .turretshared
	WEAPON_GREENTURRETGUN <- chara .weapona!
	WEAPON_GREENTURRETGUN <- chara .weapon_nodropa!
	150 LOOT_BULLET <- chara .lootamt!
;

// FNF CHARACTER METHODS

: .plagueify args( chara )
	"Ver" <- chara .name!
	112 <- chara .specialtype!
	1 <- chara .female!
	1 <- chara .strength! 4 <- chara .fitness! 1 <- chara .shooting! 6 <- chara .medical! 0  <- chara .mechanical!
	4 <- chara .composure! 3 <- chara .loyalty! 6 <- chara .wits! 1 <- chara .attitude!
	"keeps muttering something about bringing out the dead." <- chara .job!
	-5 STAT_MORALE <- chara .bonus!
	"Definitely a real doctor" <- chara .perk! 
	WEAPON_AMPUTATION <- chara .weapona!
	WEAPON_AMPUTATION <- chara .weapon_nodropa!
	WEAPON_PDNADE <- chara .weaponb! WEAPON_PDNADE <- chara .weapon_nodropb! 4 <- chara .stackedb!
	WEAPON_PDSNADE <- chara .weaponc! WEAPON_PDSNADE <- chara .weapon_nodropc! 8 <- chara .stackedc!
;

: .parduify args( chara )
	"Pardue" <- chara .name!
	113 <- chara .specialtype!
	0 <- chara .female!
	2 <- chara .headoff.y!
	5 <- chara .strength! 4 <- chara .fitness! 6 <- chara .shooting! 1 <- chara .medical! 2  <- chara .mechanical!
	0 <- chara .composure! 3 <- chara .loyalty! 0 <- chara .wits! 0 <- chara .attitude!
	4 <- chara .vitality! 4 <- chara .health!
	-2 STAT_MORALE <- chara .bonus+
	($ "has the " .. "THICKEST SKIN" rainbold .. " anyone has ever seen." $) <- chara .job!
	"THICK SKIN" <- chara .perk! 
	"BORN WITH" <- chara .trait! 
	WEAPON_PDSHOTTY <- chara .weapona!
	WEAPON_PDSHOTTY <- chara .weapon_nodropa!
	WEAPON_PDREVOLVER <- chara .weaponb!
	WEAPON_PDREVOLVER <- chara .weapon_nodropb!
	35 LOOT_SHOTGUN_SHELL <- chara .lootamt!
	35 LOOT_RIFLE_SHELL <- chara .lootamt!
	WEAPON_BOXING <- chara .weapon_default! 
;

: .canify args( chara )
	"Cans" <- chara .name!
	115 <- chara .specialtype!
	0 <- chara .female!
	2 <- chara .strength! 5 <- chara .fitness! 6 <- chara .shooting! 4 <- chara .medical! 0 <- chara .mechanical!
	6 <- chara .composure! 2 <- chara .loyalty! 5 <- chara .wits! 3 <- chara .attitude!
	3 <- chara .vitality! 3 <- chara .health!
	0.12 <- chara .speed_bonus!
	2 STAT_SHOOTING <- chara .bonus+
	-3 STAT_MORALE <- chara .bonus+
	<- chara .nodeathdrop
	($ "has a paint bucket over his head." $) <- chara .job!
	2 <- chara .carrying.slot_count!
	"Chronic addiction" <- chara .trait! 
	WEAPON_BKDOLT <- chara .weapona!
	WEAPON_BKDOLT <- chara .weapon_nodropa!
	WEAPON_BKBEAGLE <- chara .weaponb!
	WEAPON_BKBEAGLE <- chara .weapon_nodropb!
	77 LOOT_BULLET <- chara .lootamt!
;

: .stevify args( chara )
	"Steve" <- chara .name!
	116 <- chara .specialtype!
	0 <- chara .female!
	4 <- chara .strength! 5 <- chara .fitness! 1 <- chara .shooting! 0 <- chara .medical! 1  <- chara .mechanical!
	4 <- chara .composure! 3 <- chara .loyalty! 5 <- chara .wits! 1 <- chara .attitude!
	($ "Ray Gun" pbold .. " has hollow bones, as per his Puerto Rican ancestry. Unfortunately, he never learned how to fly." $) <- chara .job!
	-3 STAT_MORALE <- chara .bonus!
	"Poison tolerance" <- chara .perk! 
	2 <- chara .carrying.slot_count!
	WEAPON_BLEACH <- chara .weapona!
	WEAPON_BLEACH <- chara .weapon_nodropa! 50 <- chara .stackeda!
	WEAPON_MELBLCH <- chara .weaponb! WEAPON_MELBLCH <- chara .weapon_nodropb!
	WEAPON_MELBLCH <- chara .weapon_default!
	statmod{ MOD_SWAP_ATTACK <- chara .setmod } <- chara .swapspecial
;

: .salesify args( chara )
	"The Salesman" <- chara .name!
	117 <- chara .specialtype!
	0 <- chara .female!
	2 <- chara .headoff.y!
	3 <- chara .strength! 3 <- chara .fitness! 5 <- chara .shooting! 0 <- chara .medical! 2 <- chara .mechanical!
	2 <- chara .composure! 5 <- chara .loyalty! 5 <- chara .wits! 6 <- chara .attitude!
	($ "wants to know if you " .. "WANNA BUY A NEW WATCH." fbold $) <- chara .job!
	"Salesman" <- chara .perk! 
	WEAPON_DOLT <- chara .weaponb!
	WEAPON_BOXING <- chara .weapon_default! 
	25 LOOT_BULLET <- chara .lootamt!
;

: .upfrontify args( chara )
	"Mr. Upfront" <- chara .name!
	135 <- chara .specialtype!
	0 <- chara .female!
	2 <- chara .headoff.y!
	6 <- chara .strength! 4 <- chara .fitness! 0 <- chara .shooting! 1 <- chara .medical! 0 <- chara .mechanical!
	0 <- chara .composure! 5 <- chara .loyalty! 2 <- chara .wits! 6 <- chara .attitude!
	1 STAT_STRENGTH <- chara .bonus!
	"Expert chef" <- chara .perk!
	($ "rules the fallen " .. "Upfront Steakhouse dynasty." rbold $) <- chara .job!
	2 <- chara .carrying.slot_count!
	WEAPON_SCYTHE <- chara .weapona!
	WEAPON_SCYTHE <- chara .weapon_nodropa!
;

: .beccify args( chara )
	"Becca" <- chara .name!
	119 <- chara .specialtype!
	1 <- chara .female!
	2 <- chara .headoff.y!
	4 <- chara .strength! 1 <- chara .fitness! 2 <- chara .shooting! 0 <- chara .medical! 2 <- chara .mechanical!
	4 <- chara .composure! 2 <- chara .loyalty! 3 <- chara .wits! 0 <- chara .attitude!
	"Chain smoker" <- chara .trait! 
	($ "is deadly allergic to bees, " .. "buzz buzz. " rainbold .. :D $) <- chara .job!
	WEAPON_BENCHAXE <- chara .weapona!
	WEAPON_BENCHAXE <- chara .weapon_nodropa!
	-4 STAT_MORALE <- chara .bonus!
;

: .ghostbeccify args( chara )
	1 STAT_MORALE <- chara .bonus+
	2 STAT_STRENGTH <- chara .bonus+
	2 STAT_FITNESS <- chara .bonus+
	2 <- chara .headoff.y!
	"Ghost" <- chara .trait! 
	($ "is now a " .. "SPOOKY GHOST" fbold .. ", although she is also still allergic to bees. " $) <- chara .job!
	0.82 0.82 0.82 <- chara .tint.skin!
	0.82 0.82 0.82 <- chara .tint.body!
	0.6 <- chara .tint.body.a!
	0.6 <- chara .tint.skin.a!
;

: .bobify args( chara )
	"Bob" <- chara .name!
	120 <- chara .specialtype!
	1 <- chara .female!
	3 <- chara .strength! 5 <- chara .fitness! 0 <- chara .shooting! 1 <- chara .medical! 1 <- chara .mechanical!
	6 <- chara .composure! 3 <- chara .loyalty! 6 <- chara .wits! 3 <- chara .attitude!
	-2 STAT_MORALE <- chara .bonus!
	"Gem" <- chara .perk!
	($ "is being awfully passive about this situation. " .. :| $) <- chara .job!
	3 <- chara .carrying.slot_count!
	<- chara .nocanshoot
	WEAPON_WSLAM <- chara .weapon_default!
;

: .cuffify args( chara )
	"Cuff Breaker" <- chara .name!
	121 <- chara .specialtype!
	0 <- chara .female!
	4 <- chara .strength! 4 <- chara .fitness! 1 <- chara .shooting! 0 <- chara .medical! 0 <- chara .mechanical!
	0 <- chara .composure! 2 <- chara .loyalty! 1 <- chara .wits! 6 <- chara .attitude!
	2 STAT_STRENGTH <- chara .bonus!
	"BREAKER" <- chara .perk!
	"CUFF" <- chara .trait! 
	($ " can break dese' cuffs... " .. "WWOOAARRGHHHHHH!!!!!" fbold .. DX $) <- chara .job!
	1 <- chara .carrying.slot_count!
	<- chara .notake
	<- chara .nocanshoot
	<- chara statmod{ .zombiewrestler }
	WEAPON_CUFFED <- chara .weapona! WEAPON_CUFFED <- chara .weapon_nodropa!
	WEAPON_CUFFED <- chara .weapon_default!
	statmod{ MOD_CUFFED <- chara .setmod }
;

: .driftify args( chara )
	"Drifter" <- chara .name!
	122 <- chara .specialtype!
	1 <- chara .female!
	3 <- chara .strength! 6 <- chara .fitness! 5 <- chara .shooting! 4 <- chara .medical! 2 <- chara .mechanical!
	5 <- chara .composure! 3 <- chara .loyalty! 4 <- chara .wits! 3 <- chara .attitude!
	3 <- chara .vitality! 3 <- chara .health!
	0.33 <- chara .speed_bonus!
	2 <- chara .headoff.y!
	<- chara .nodeathdrop
	($ "keeps coughing up blood when they think nobody is looking." $) <- chara .job!
	"Chronic illness" <- chara .trait! 
	WEAPON_DRIFTSWORD <- chara .weapona!
	WEAPON_DRIFTSWORD <- chara .weapon_nodropa!
	WEAPON_DRIFTPIST <- chara .weaponb!
	WEAPON_DRIFTPIST <- chara .weapon_nodropb!
	45 <- chara .stackedb!
	WEAPON_DRIFTSHOT <- chara .weaponc!
	WEAPON_DRIFTSHOT <- chara .weapon_nodropc!
	15 <- chara .stackedc!
;

: .beagify args( chara )
	"Juan Beag" <- chara .name!
	-128 <- chara .specialtype!
	0 <- chara .female!
	1 <- chara .strength! 3 <- chara .fitness! 6 <- chara .shooting! 1 <- chara .medical! 1 <- chara .mechanical!
	5 <- chara .composure! 3 <- chara .loyalty! 5 <- chara .wits! 1 <- chara .attitude!
	2 STAT_SHOOTING <- chara .bonus+
	($ "is a legendary marksman, who only needs one shot for any target." $) <- chara .job!
	2 <- chara .carrying.slot_count!
	"Global elite" <- chara .perk! 
	WEAPON_JUANBEAG <- chara .weapona!
	WEAPON_JUANBEAG <- chara .weapon_nodropa!
	WEAPON_KARAMBIT <- chara .weaponb! 
	WEAPON_KARAMBIT <- chara .weapon_nodropb!
	7 LOOT_RIFLE_SHELL <- chara .lootamt!
;

: .bobbleify args( chara )
	"Bobble" <- chara .name!
	124 <- chara .specialtype!
	1 <- chara .female!
	0.5 <- chara .headoff.y!
	0.95 <- chara .scale.body.y! 0.95 <- chara .scale.body.x! 0.95 <- chara .scale.head.y! 0.95 <- chara .scale.head.x!
	5 <- chara .strength! 4 <- chara .fitness! 2 <- chara .shooting! 3 <- chara .medical! 1 <- chara .mechanical!
	6 <- chara .composure! 6 <- chara .loyalty! 1 <- chara .wits! 6 <- chara .attitude!
	($ "is constantly smiling, even when splatting zombies. Nobody is sure if this is good or bad." $) <- chara .job!
	2 <- chara .carrying.slot_count!
	4 STAT_MORALE <- chara .bonus!
	"Squid" <- chara .perk! 
	"Kid" <- chara .trait! 
	0.12 <- chara .speed_bonus!
	WEAPON_SLOSHER <- chara .weapona!
	WEAPON_SLOSHER <- chara .weapon_nodropa!
;

: .maskunify args( chara )
	"Mask" <- chara .name!
	125 <- chara .specialtype!
	0 <- chara .female!
	0.5 <- chara .headoff.y!
	0.95 <- chara .scale.body.y! 0.95 <- chara .scale.body.x! 0.95 <- chara .scale.head.y! 0.95 <- chara .scale.head.x!
	3 <- chara .strength! 5 <- chara .fitness! 5 <- chara .shooting! 3 <- chara .medical! 4 <- chara .mechanical!
	5 <- chara .composure! 5 <- chara .loyalty! 6 <- chara .wits! 1 <- chara .attitude!
	($ "refuses to show any sign of joy, not that anyone can really tell what's behind that mask." $) <- chara .job!
	2 <- chara .carrying.slot_count!
	-4 STAT_MORALE <- chara .bonus!
	"Kid" <- chara .perk! 
	"Squid" <- chara .trait! 
	0.12 <- chara .speed_bonus!
	WEAPON_CROLLER <- chara .weapona!
	WEAPON_CROLLER <- chara .weapon_nodropa!
;

: .nickify args( chara )
	"Nick" <- chara .name!
	126 <- chara .specialtype!
	0 <- chara .female!
	1 <- chara .headoff.y!
	1 <- chara .strength! 2 <- chara .fitness! 4 <- chara .shooting! 4 <- chara .medical! 6 <- chara .mechanical!
	2 <- chara .composure! 1 <- chara .loyalty! 6 <- chara .wits! 1 <- chara .attitude!
	($ "is puportedly a trans-dimensional scientist, in search of 'szechuan sauce'." $) <- chara .job!
	-1 STAT_MORALE <- chara .bonus!
	"Schwifty" <- chara .trait! 
	WEAPON_LASERPISTOL <- chara .weapona!
	WEAPON_LASERPISTOL <- chara .weapon_nodropa!
	80 LOOT_GAS <- chara .lootamt!
;

: .martify args( chara )
	"Marty" <- chara .name!
	127 <- chara .specialtype!
	0 <- chara .female!
	3 <- chara .strength! 4 <- chara .fitness! 1 <- chara .shooting! 0 <- chara .medical! 3 <- chara .mechanical!
	1 <- chara .composure! 5 <- chara .loyalty! 2 <- chara .wits! 5 <- chara .attitude!
	"Schwifty" <- chara .trait! 
	($ "is a prepubescent boy with a name quite similar to that of an old Jewish comedy writer." $) <- chara .job!
;

: .sorsbifytest args( chara )
	"Sorsby" <- chara .name!
	109 <- chara .specialtype!
	0 <- chara .female!
	1 <- chara .headoff.y!
	6 <- chara .strength! 1 <- chara .fitness! 2 <- chara .shooting! 0 <- chara .medical! 0 <- chara .mechanical!
	1 <- chara .composure! 2 <- chara .loyalty! 0 <- chara .wits! 1 <- chara .attitude!
	"Max sec." <- chara .perk! 
	"Manhole cover thief" <- chara .trait! 
	($ "is an average dancer who held up a Domino's with a chorizo and has kissed over 3 women." $) <- chara .job!
	WEAPON_NIGHTSTICK <- chara .weapona!
;

: .pyrify args( chara )
	"Pyro" <- chara .name!
	110 <- chara .specialtype!
	0 <- chara .female!
	1 <- chara .headoff.y!
	4 <- chara .strength! 3 <- chara .fitness! 4 <- chara .shooting! 0 <- chara .medical! 2 <- chara .mechanical!
	2 <- chara .composure! 4 <- chara .loyalty! 2 <- chara .wits! 6 <- chara .attitude!
	($ "keeps making muffled sounds from her mask. His response to everyone's indifference is typically to set things on fire." $) <- chara .job!
	"Fireproof" <- chara .trait! "Clinically insane" <- chara .perk!
	WEAPON_FLAMETHROWER <- chara .weapona!
	WEAPON_FLAMETHROWER <- chara .weapon_nodropa!
	WEAPON_FIRE <- chara .weaponb!
	WEAPON_FIRE <- chara .weapon_nodropb!
	WEAPON_FLAREGUN <- chara .weaponc!
	4 <- chara .stackedc!
	100 LOOT_GAS <- chara .lootamt!
;

: .scipifytest args( chara )
	"Scipio" <- chara .name!
	137 <- chara .specialtype!
	0 <- chara .female!
	1 <- chara .headoff.y!
	4 <- chara .strength! 5 <- chara .fitness! 0 <- chara .shooting! 0 <- chara .medical! 0 <- chara .mechanical!
	2 <- chara .composure! 3 <- chara .loyalty! 3 <- chara .wits! 2 <- chara .attitude!
	"Professional wrestler" <- chara .perk! 
	($ "Africanus" pbold .. " is the current reigning champion of the " .. "COMPLETELY REAL SPORT" fbold .. " of professional wrestling." $) <- chara .job!
	WEAPON_PANKRATION <- chara .weapon_default!
;

: .benderify args( chara )
	"Tom" <- chara .name!
	89 <- chara .specialtype!
	0 <- chara .female!
	5 <- chara .strength! 5 <- chara .fitness! 3 <- chara .shooting! 3 <- chara .medical! 0 <- chara .mechanical!
	3 <- chara .composure! 6 <- chara .loyalty! 3 <- chara .wits! 6 <- chara .attitude!
	4 <- chara .vitality! 4 <- chara .health!
	"AGINCOURT" <- chara .perk! 
	"FOR" <- chara .trait! 
	($ "Bender" pbold .. " believes he is, and may actually be, a knight." $) <- chara .job!
	WEAPON_BONECRUSHER <- chara .weapona! WEAPON_BONECRUSHER <- chara .weapon_nodropa!
	WEAPON_BANNERSHIELD <- chara .weaponb! WEAPON_BANNERSHIELD <- chara .weapon_nodropb!
	2 <- chara .carrying.slot_count!
	statmod{ MOD_SWAP_ATTACK <- chara .setmod } <- chara .swapspecial
;

: .ferdinandify args( chara )
	"Ferdinand" <- chara .name!
	-124 <- chara .specialtype!
	0 <- chara .female!
	3 <- chara .headoff.y!
	3 <- chara .strength! 4 <- chara .fitness! 1 <- chara .shooting! 0 <- chara .medical! 1 <- chara .mechanical!
	1 <- chara .composure! 5 <- chara .loyalty! 2 <- chara .wits! 6 <- chara .attitude!
	"Crust punk" <- chara .perk!
	"The BOMB" <- chara .trait! 
	"has aggressively good vibes, for real. He's also a literal walking explosive." <- chara .job!
	WEAPON_SWITCHCOMB <- chara .weapona!
	WEAPON_SWITCHCOMB <- chara .weapon_nodropa!
;

: .maeify args( chara )
	"May" <- chara .name!
	123 <- chara .specialtype!
	1 <- chara .female!
	2 <- chara .strength! 5 <- chara .fitness! 3 <- chara .shooting! 0 <- chara .medical! 0 <- chara .mechanical!
	2 <- chara .composure! 3 <- chara .loyalty! 4 <- chara .wits! 5 <- chara .attitude!
	"Dropout" <- chara .perk!
	"Nightmare eyes" <- chara .trait! 
	"is a total trash mammal who is lost in this world." <- chara .job!
	WEAPON_MAEBAT <- chara .weapona!
	WEAPON_MAEBAT <- chara .weapon_nodropa!
	WEAPON_CLAW <- chara .weapon_default!
;

: .remaeify args( chara )
	123 <- chara .specialtype!
	-2 STAT_STRENGTH <- chara .bonus+ -2 STAT_FITNESS <- chara .bonus+
	"Nightmare eyes" <- chara .trait! 
	0 <- chara .speed_bonus!
	1 <- chara .tint.skin.a!
	1 <- chara .tint.body.a!
	"is a total trash mammal who is lost in this world." <- chara .job!
	WEAPON_MAEBAT <- chara .weapona!
	WEAPON_MAEBAT <- chara .weapon_nodropa!
;

: .coachify args( chara )
	"Coach" <- chara .name!
	118 <- chara .specialtype!
	0 <- chara .female!
	WEAPON_SHOTGUN <- chara .weapona!
	WEAPON_SHOTGUN <- chara .weapon_nodropa!
	35 LOOT_SHOTGUN_SHELL <- chara .lootamt!
	($ "is what his friends call him, along with " .. "Fatass" pbold .. ", " .. "one man cheeseburger apocalypse" pbold .. ", and " .. "hey, that was mine!" pbold $) <- chara .job!
	"Could eat an entire steak dinner" <- chara .perk! 
	"Gourmand" <- chara .trait! 
	1 <- chara .fitness!	5 <- chara .strength!	4 <- chara .shooting! 3 <- chara .medical! 1 <- chara .mechanical!
	6 <- chara .loyalty!	6 <- chara .attitude!	3 <- chara .wits!    4 <- chara .composure!
;

: .recoachify args( chara )
	118 <- chara .specialtype!
	-3 STAT_VITALITY <- chara .stat+
	-3 STAT_STRENGTH <- chara .bonus+
	-3 STAT_FITNESS <- chara .bonus+
	-3 STAT_SHOOTING <- chara .bonus+
	<- chara .fullheal
	($ "terrifies all around him following that rampage, though he doesn't appear to mind much." $) <- chara .job!
	"Football coach" <- chara .perk! 
	4 <- chara .composure!
;

: .chadify args( chara )
	"Chad" <- chara .name!
	101 <- chara .specialtype!
	0 <- chara .female!
	0.2 <- chara .speed_bonus!
	WEAPON_HEALSPRAY <- chara .weapona!
	($ "has a rich pa, who owns a lake. Several lakes, in fact." $) <- chara .job!
	"Top Seller" <- chara .perk! "Momma's boy" <- chara .trait! 
	WEAPON_HEALSPRAY <- chara .weapona! 3 <- chara .stackeda!
	4 <- chara .fitness!	1 <- chara .strength!	1 <- chara .shooting! 4 <- chara .medical! 2 <- chara .mechanical!
	3 <- chara .loyalty!	1 <- chara .attitude!	1 <- chara .wits!    0 <- chara .composure
	statmod{ MOD_HAGGLER <- chara .setmod }
;


: .phillify args( chara )
	"Phil" <- chara .name!
	114 <- chara .specialtype!
	0 <- chara .female!
	0 <- chara .seed!
	2 <- chara .headoff.y!
	1 <- chara .carrying.slot_count!
	WEAPON_M4 <- chara .weapona!
	WEAPON_M4 <- chara .weapon_nodropa!
	90 LOOT_RIFLE_SHELL <- chara .lootamt!
	($ "E. Raes" pbold .. " is a famous salesman who has sold you 50% of a gun he won't let go of. Make sure you can pay off the rest of it!" $) <- chara .job!
	"Salesman" <- chara .perk! 
	4 <- chara .fitness!	3 <- chara .strength!	6 <- chara .shooting!
	6 <- chara .loyalty!	6 <- chara .attitude!	4 <- chara .wits!    5 <- chara .composure
;


// Shared logic
: tempchar-common args( chara timer )
	<- chara .default-ai-setup
	<- chara .party-familiar
	6 <- chara .loyalty!
	<- timer <- chara .thing@ .timer!
	' tempchar-main-events <- chara .main_events!
;

: tempchar-common-2min 60 120 138 rnd * tempchar-common ;
: tempchar-common-5min 60 300 330 rnd * tempchar-common ;

: .tempchickenify args( chara )
	<- chara .chickenify
	<- chara 60 50 70 rnd * tempchar-common
;

: .tempbluebotify args( chara )
	<- chara .bluebotify
	<- chara tempchar-common-2min
;

: .tempredbotify args( chara )
	<- chara .redbotify
	<- chara tempchar-common-2min
;	

0 stack
	' .moosify shove
	' .beaverify shove
	' .pigify shove
	' .chickenify shove
	' .gerbilfy shove
	' .doggify shove
	' .catify shove
	' .goatify shove
	' .skelify shove
	' .batify shove
	' .fly shove
value pukey-picker-base
pukey-picker-base shuffles var pukey-picker

: .pukeypicker pukey-picker depths 0= if pukey-picker-base shuffles to pukey-picker then pops nip execute ;

: .pukeyify args( chara )
	<- chara .pukeypicker 
	// 0 <- chara .thing@ 50 %chance if .clr.g! else .clr.r! then
	// 0 1 rnd <- chara .thing@ .clr.b!
	0 360 frnd angle-colour 2 rgb* <- chara .thing@ .clr!
	<- chara tempchar-common-2min
;

weapondef{

custom: Egg
	weapon: egg
	spriteid: MELEE6 0x 1b +
	melee_thrown: 1
	melee_thrown_lob: 2
	stack_max: 12

	: spawn-a-chicken 
		new-npc 30 lt .fade! lt .character@ .tempchickenify
	;

	:noname args( me eventid )
		<- eventid THING_EVENT_BREAK = if
			spawn-a-chicken <- me lt-to-thing
			<- me mission{ .smokepoof }
		then;

		<- eventid THING_EVENT_BOUNCE = <- eventid THING_EVENT_WALL = or if
			<- me .smack <- me killit
		then;
	;
	melee_thrown_handler: last
	root{ : egg } egg 0 lt .flip! ;

}

// Set up whatever character for PUKEYBALL
// - set party/recruit if required 
: new-tempchar new-npc 30 lt .fade! lt .character@ ;

:noname new-tempchar .pukeyify
; weapondef{ last to spawn-a-pukeymon }

:noname new-tempchar .tempbluebotify
; weapondef{ last to spawn-a-bluerobot }

:noname new-tempchar .tempredbotify
; weapondef{ last to spawn-a-redrobot }

:noname new-tempchar .redturretify
; weapondef{ last to spawn-a-redturret }

:noname new-tempchar .greenturretify
; weapondef{ last to spawn-a-greenturret }
