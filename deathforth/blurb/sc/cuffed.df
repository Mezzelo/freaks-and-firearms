	: CUFFED-oneline1 "I CAN BREAK THESE... CUFFS..." ;
	: CUFFED-oneline2 "I CAN BREAK THESE CUFFS!!!!" ;
	: CUFFED-oneline3 ($ "I CAN BREAK DESE'!! " .. "WOOOARGHHH!!! " rainbold .. DX $) ;
	: CUFFED-oneline4 ($ "I CAN.. BREAK THESE!! " .. DX $) ;

	deck-new
		card: CUFFED-oneline1
		card: CUFFED-oneline2
		card: CUFFED-oneline3
		card: CUFFED-oneline4
	constant CUFFED-ONELINERS
	CUFFED-ONELINERS var cuffed-oneliners
	CUFFED-ONELINERS shuffles to cuffed-oneliners

	: CUFFED-emote1 " almost manages to break his cuffs.  Almost." ;
	: CUFFED-emote2 " hits himself in the face with his cuffs." ;
	: CUFFED-emote3 " attempts to saw his cuffs on the car-window." ;
	: CUFFED-emote4 " continues to struggle with his cuffs." ;
	: CUFFED-emote5 " begins biting at his cuffs." ;

	deck-new
		card: CUFFED-emote1
		card: CUFFED-emote2
		card: CUFFED-emote3
		card: CUFFED-emote4
		card: CUFFED-emote5
	constant CUFFED-EMOTES
	CUFFED-EMOTES var cuffed-emotes
	CUFFED-EMOTES shuffles to cuffed-emotes	
	
: cuffed-oneliner
	cuffed-oneliners depths 0= if CUFFED-ONELINERS shuffles to cuffed-oneliners then
	blurbslot 0= if
		drawcard blurbsay
	then
;

: cuffed-emote
	cuffed-emotes depths 0= if CUFFED-EMOTES shuffles to cuffed-emotes then
	blurbslot 0= if
		qmsg ($ me .name@ .. cuffed-emotes drawcard $) txt
	then
;

	deck-new
	5 cards: cuffed-emote
	10 cards: cuffed-oneliner

	constant BLURB-CUFFED-DECK
	BLURB-CUFFED-DECK var blurb-cuffed-deck
	BLURB-CUFFED-DECK shuffles to blurb-cuffed-deck
